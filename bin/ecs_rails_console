#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

$LOAD_PATH.push File.expand_path('../lib', __dir__)
require 'ecs_rails_console'


options = {
  environment: 'production',
  command: 'bin/rails console'
}

opts = OptionParser.new do |o|
  o.banner = 'Usage: ecs_rails_console [options]'

  o.on('-g', '--generate-config', 'Generate config file') do
    template = File.expand_path('../config/ecs_rails_console.yml', __dir__)
    config_file = 'config/ecs_rails_console.yml'

    if File.exist?(config_file)
      puts 'Configuration file already exists and will be kept untouched.'
    else
      FileUtils.mkdir_p(File.dirname(config_file))
      FileUtils.cp(template, "#{Dir.pwd}/#{config_file}")
      puts "File generated: #{config_file}"
    end
    exit
  end

  o.on('-h', '--help', 'Display this help') do
    puts o
    exit
  end

  o.on('-eENVIRONMENT', '--environment=ENVIRONMENT', 'Rails environment') do |e|
    options[:environment] = e
  end

  o.on('-v', '--version', 'Display version') do
    require 'ecs_rails_console/version'
    puts EcsRailsConsole::VERSION
    exit
  end
end

begin
  opts.parse!
rescue OptionParser::InvalidOption => e
  puts e
  puts
  puts opts
  exit
end

options[:command] = ARGV.join(' ') unless ARGV.empty?

begin
  EcsRailsConsole::Cli.run!(options)
rescue Gem::LoadError
  puts 'ecs_rails_console is not in your Gemfile.'
  exit 1
end
